<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yik-sai]]></title>
  <link href="http://yik-sai.rocks/atom.xml" rel="self"/>
  <link href="http://yik-sai.rocks/"/>
  <updated>2015-08-13T18:32:14+08:00</updated>
  <id>http://yik-sai.rocks/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[GeekBand UI笔记 — 常用控件整理（一）]]></title>
    <link href="http://yik-sai.rocks/14394552964276.html"/>
    <updated>2015-08-13T16:41:36+08:00</updated>
    <id>http://yik-sai.rocks/14394552964276.html</id>
    <content type="html"><![CDATA[
<h2>UISwitch开关控件的使用</h2>

<h3>如何创建</h3>

<p>UISwitch 的大小是固定的 W51，H31，在Frame里的宽高设定其实是没用的。</p>

<pre><code class="language-objc">UISwitch *switch = [[UISwitch alloc] initWithFrame:CGRectMake(100, 100, 100, 0)];
[self.view addSubview:switch];
</code></pre>

<p>要检验的话，可以把上面这个开关的宽高参数打印出来比较。</p>

<pre><code class="language-objc">NSLog(@&quot;%f %f&quot;, switch.frame.size.width, switch.frame.size.height);
</code></pre>

<h3>开关的事件处理</h3>

<p>与普通Button的<code>Touch</code>事件类型不同，开关是<code>UIControlEventValueChanged</code>。</p>

<pre><code class="language-objc">[switch addTarget:self action:@selector(switchChanged:) forControlEvents:UIControlEventValueChanged];
</code></pre>

<p>而开关的<code>value</code>只有两种：<code>YES</code> or <code>NO</code>，比如</p>

<pre><code class="language-objc">switch.on = YES;
</code></pre>

<p>在事件触发的方法里，我们只需要用<code>if else</code>或<code>switch</code>（此switch非上面的switch）语句写好判断的逻辑，即可为「开和关」设置出不同的动作。</p>

<span id="more"></span><!-- more -->

<h3>开关属性的设置</h3>

<p>虽然开关的大小无法改变，但其他属性还是可以自定义的。</p>

<ul>
<li>设置开状态的颜色（注意不同状态需分开设置）</li>
</ul>

<pre><code class="language-objc">switch.onTintColor = [UIColor redColor];
</code></pre>

<ul>
<li>设置边框颜色（没有<code>on</code>字眼的）</li>
</ul>

<pre><code class="language-objc">switch.tintColor = [UIColor greenColor];
</code></pre>

<ul>
<li>开关圆点的颜色（这个叫<code>thumb</code>）</li>
</ul>

<pre><code class="language-objc">switch.thumbTintColor = [UIColor yellowColor];
</code></pre>

<h2>UIActivityIndicatorView 活动提示（小菊花）</h2>

<h3>如何创建</h3>

<pre><code class="language-objc">UIActivityIndicatorView *aiView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhite];
//风格有三种: 白色, 灰色, 白色（大）
</code></pre>

<p>大小也是系统默认的：<code>UIActivityIndicatorViewStyleWhite</code>和<code>UIActivityIndicatorViewStyleGray</code>大小是<code>20</code>，<code>UIActivityIndicatorViewStyleWhiteLarge</code>大小<code>37</code>。</p>

<p>设置摆放位置</p>

<pre><code class="language-objc">aiView.center = CGPointMake(160, 240);
```   

###如何开启活动提示视图的动画
一般来说活动视图控件是由于被触发才会显示出来的，比如说加载网络数据的时候。所以在使用中，除了创建之外，还需要把以下语句放在相关的触发事件中。

```objc
//因为活动视图是一个转动的动画，所以是Animating。
[aiView startAnimating];
</code></pre>

<p>比如以下代码，当页面加载时，活动视图会被创建并弹出，5秒后（模拟网络加载完成）会消失</p>

<pre><code class="language-objc">- (void)viewDidLoad
{
    [super viewDidLoad];
    UIActivityIndicatorView * aivView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
    aivView.center = CGPointMake(160, 240);
    [self.view addSubview:aivView];
    //弹出活动提示视图
   [aivView startAnimating];
   //创建一个定时器，5秒后执行下面的方法
    NSTimer * timer =[NSTimer scheduledTimerWithTimeInterval:5 target:self selector:@selector(action:) userInfo:aivView repeats:NO];    
}
//定时器的执行方法
-(void)action:(NSTimer *)timer{
    UIActivityIndicatorView * actv = [timer userInfo];
    //五秒后活动视图停止并消失
    [actv stopAnimating];   
}
</code></pre>

<p><strong>注：</strong>实际应用中, 我们会在这个菊花和界面中间添加一个半透明view，令页面变暗，并在防止用户等待过程中误触页面</p>

<h2>UISlider 滑块控件</h2>

<h3>如何创建</h3>

<pre><code class="language-objc">UISlider *slider = [[UISlider alloc] initWithFrame:CGRectMake(100, 100, 200, 23)];
NSLog(@&quot;h=%f&quot;,slider.frame.size.height);
//宽度可以任意修改，高度是固定的
</code></pre>

<h3>各种属性设置</h3>

<pre><code class="language-objc">//最大最小值
slider.minimumValue = 0;
slider.maximumValue = 100;
slider.value = 50; //设置初始值（滑块的初始位置）
slider.maximumTrackTintColor = [UIColor redColor]; //滑块右边轨道的颜色
slider.minimumTrackTintColor = [UIColor greenColor]; //左边轨道颜色

//自定义滑块图片（用类方法而不是点语法设置）
[slider setThumbImage:[UIImage imageNamed:@&quot;3.png&quot;] forState:UIControlStateNormal];
[slider setThumbImage:[UIImage imageNamed:@&quot;3.png&quot;] forState:UIControlStateHighlighted];
//自定义左右轨道的图片
[slider setMaximumTrackImage:[UIImage imageNamed:@&quot;1.png&quot;] forState:UIControlStateNormal];
[slider setMinimumTrackImage:[UIImage imageNamed:@&quot;2.png&quot;] forState:UIControlStateNormal];    
//注意这里要加UIControlStateHightlighted的状态，否则当拖动滑块时滑块将变成原生的控件
</code></pre>

<p>事件方法的处理也是用<code>UIControlEventValueChanged</code>，跟开关不同的是滑块的值需要用<code>slider.value</code>来获取，然后做出相应判断。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand UI笔记 — Label]]></title>
    <link href="http://yik-sai.rocks/14393456546888.html"/>
    <updated>2015-08-12T10:14:14+08:00</updated>
    <id>http://yik-sai.rocks/14393456546888.html</id>
    <content type="html"><![CDATA[
<h3>如何创建一个标签</h3>

<pre><code class="language-objc">UILabel * label = [[UILabel alloc] init];
//把label 加到界面上去
[self.view addSubview:label];
</code></pre>

<h3>如何为label设置属性</h3>

<h4>尺寸 — 尺寸是必不可少的参数</h4>

<ul>
<li>一般可以在init的时候直接调用 <code>initWithFrame</code> 的方法</li>
</ul>

<pre><code class="language-objc">    UILabel * myLabel = [[UILabel alloc] initWithFrame:CGRectMake(CGFloat x, CGFloat y, CGFloat width, CGFloat height)];
</code></pre>

<p><code>CGRectMake</code> 用于在view上画矩形，四个参数分别是矩形左上角的x、y轴坐标，代表矩形的起始点—也就是说它们影响着矩形的位置；以及矩形的宽、高—影响矩形的大小。</p>

<p><strong>注</strong>：x、y轴对矩形位置的影响是相对的，它还取决于最后你在 <code>[self.view addSubview:label];</code> 时把矩形添加到哪个<code>view</code>上，如以下代码，myLabel 的x、y坐标都是0，但由于它是被添加到一个自定义的<code>view1</code>上，而不是最底层的<code>self.view</code>上，所以它的<code>CGRectMake(0, 0, 100, 200)</code> 是相对于<code>view1</code>而言的。</p>

<pre><code class="language-objc">    UIView * view1 = [[UIView alloc] initWithFrame:CGRectMake(50, 120, 200, 400)];
    view1.backgroundColor = [UIColor blueColor];
    [self.view addSubview:view1];
    
    UILabel * myLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 100, 200)];
    myLabel.backgroundColor = [UIColor redColor];
    [view1 addSubview:myLabel];
</code></pre>

<span id="more"></span><!-- more -->

<p><img src="media/14393456546888/14393475101195.jpg" alt=""/></p>

<ul>
<li>也可以把 frame 单独拿出来设置，如</li>
</ul>

<pre><code class="language-objc">label.frame = CGRectMake(5, 20, 310, 50);
</code></pre>

<p>还可以再拆，因为 <code>CGRect</code> 其实是一个结构体, 它封装了两个结构体 CGPoint(坐标)和 CGSize(面积)。</p>

<pre><code class="language-objc">CGRect rect;
rect.origin.x = 100;
rect.origin.y = 100;
rect.size.width = 200;
rect.size.height = 100;

label.frame = rect;
</code></pre>

<p><strong>这样做有什么好处呢？</strong>目前我所体会到的主要是，当你的矩形参数需要根据App用户的设定而变化，所以不能写死时，这样的处理比较方便调用。</p>

<h4>label上显示文字</h4>

<pre><code class="language-objc">label.text = @&quot;I am a label&quot;;
</code></pre>

<ul>
<li>设置字体颜色</li>
</ul>

<p>调用属性<code>textColor</code>，可以用 RGB 三原色（红绿蓝）的格式，<code>alpha</code>是透明度，1为不透明，0为全透明。</p>

<pre><code class="language-objc">    label.textColor = [UIColor colorWithRed:34/255.0 green:34/255.0 blue:34/255.0 alpha:1];
    //颜色数值应为xx/255.0，或者对应的小数
    //把上面的数字换成 arc4random()%256/255.0，可设置随机色
</code></pre>

<p>iOS不支持直接使用十六进制代码（0xEDEDED这种），这时我们可以使用宏定义的方法：<br/>
1 将以上宏定义加入到实现文件的头部，在程序中需要使用十六进制颜色代码时直接调用</p>

<pre><code class="language-objc">#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]
</code></pre>

<p>2 比如说我们从美工处获得了一个十六进制的颜色代码<code>#EDEDED</code>，只需要将颜色代码<code>#EDEDED</code>的<code>#</code>号替换为<code>0x</code>即可</p>

<pre><code class="language-objc">UILabel *label;
[label setBackgroundColor:UIColorFromRGB(0xEDEDED)];
</code></pre>

<p>有时候我们会自己截屏测色，请注意这样取到的RGB数值得先<code>/255.0</code>，如上面的代码所示<br/>
<img src="media/14393456546888/14393496148053.jpg" alt=""/></p>

<p>如果要使用随机色，可考虑先自定义一个，方便调用</p>

<pre><code class="language-objc">    UIColor * myColor = [UIColor colorWithRed:arc4random()%256/255.0 green:arc4random()%256/255.0 blue:arc4random()%256/255.0 alpha:1];
</code></pre>

<p>如对颜色要求不高，也可用系统预设的颜色描述。现实中较少用。</p>

<pre><code class="language-objc">    label.textColor = [UIColor redColor];
</code></pre>

<ul>
<li>设置标签背景色</li>
</ul>

<pre><code class="language-objc">    label.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:1];
</code></pre>

<ul>
<li>设置标签字体的风格和大小</li>
</ul>

<pre><code class="language-objc">//只设置字体大小，字体为系统默认
    label.font = [UIFont systemFontOfSize:14];
//设置字体
    label.font = [UIFont fontWithName:@&quot;Courier New&quot; size:14];
</code></pre>

<ul>
<li>设置标签文字对齐方式</li>
</ul>

<pre><code class="language-objc">    label.textAlignment = NSTextAlignmentRight;
</code></pre>

<ul>
<li>自适应高度, 网上的方法似乎都很复杂，原理似乎是要计算字体的高度乘以字体的总数之类的。但亲测在label设置的最后加上以下两句即可（注意顺序不要乱）。不过本人也是新手，如有建议欢迎讨论。</li>
</ul>

<pre><code class="language-objc">label.numberOfLines = 0;
[label sizeToFit];
</code></pre>

<p><img src="media/14393456546888/14393507501588.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好Riff献给你，让爱传千里 — 第二集 || Guns'N'Roses - Catcher in the Rye]]></title>
    <link href="http://yik-sai.rocks/14392006653218.html"/>
    <updated>2015-08-10T17:57:45+08:00</updated>
    <id>http://yik-sai.rocks/14392006653218.html</id>
    <content type="html"><![CDATA[
<p>今天讲一点点硬摇。</p>

<p>Glam 也好 Hair 也好，80 年代的 Hard Rock 一直被认为是金属乐进入主流的黄金时期。很多大师级的人马直到今天还活跃在各种大型现场，影响着无数新老乐迷。</p>

<p>（这些乐队 logo 你还认得出多少？）<br/>
<img src="media/14392006653218/glamhairlsleazeglitter.jpg" alt="glamhairlsleazeglitter"/></p>

<span id="more"></span><!-- more -->

<p>Guns&#39;N&#39;Roses 当然也是大师，但至于它是否还算「活跃」，恐怕不同的歌迷心中会有着不同的答案—队员之间特别是 Axl Rose 和 Slash 的恩怨情仇分分合合都可以出书了。</p>

<p><img src="media/14392006653218/Guns-N-Roses.jpg" alt="Guns-N-Roses"/></p>

<p>（Axl 和 Slash。放在今天，就是一对好 CP）<br/>
<img src="media/14392006653218/Axl-Rose-and-Slash-axl-rose-and-slash-10850427-730-1023.jpg" alt="Axl-Rose-and-Slash-axl-rose-and-slash-10850427-730-1023"/><br/>
<img src="media/14392006653218/axl-rose-slash.jpg" alt="axl-rose-slash"/></p>

<p>虽说我常自诩是个 solo 党，但对 Slash 其实没什么感情。反而 Axl 这种年少轻狂、年老顽强而富有人文气息的老浪子才是吸引我持续关注GNR 的动力。</p>

<p>（现在的 Axl）<br/>
<img src="media/14392006653218/axl-rose%20-1-.jpg" alt="axl-rose -1-"/></p>

<p>我一直觉得 Axl 和他的新乐手 Bumblefoot 和 DJ Ashba 也一直承受了很多不应该的压力，总是抬不起头的感觉。所以这次我们不会提已经上了神台的《November Rain》、《Sweet Child O&#39;mine》之类欧美浪漫金曲，而是在「后Slash时代」我心中的一首沧海遗珠—《Chinese Democracy》里的《Catcher in the Rye 麦田守望者》，而且一定要是 2012 年《Live at the Hard Rock Casino, Las Vegas》现场版。</p>

<p><img src="media/14392006653218/d93304862fcc694b836326f110435cc2.jpg" alt="d93304862fcc694b836326f110435cc2"/></p>

<p>读过《麦》的人应该都记得主人公霍尔顿的放浪形骸，而这简直就是 Axl 前半生的真实写照。但在这首歌里，在沉寂并饱受非议多年之后，Axl 唱的是心中的苦闷，是与世界的格格不入。</p>

<blockquote>
<p>When all is said and done<br/>
We&#39;re not the only ones<br/>
Who look at life this way<br/>
That&#39;s what the old folks say<br/>
But every time I&#39;d see them<br/>
Makes me wish I had a gun<br/>
If I thought that I was crazy<br/>
Well I guess I&#39;d have more fun</p>
</blockquote>

<p>在我主观的想象里，Axl 心中也一定长住着一个 Peter Pan。</p>

<p><img src="media/14392006653218/axl-rose-guns-n-roses.jpg" alt="axl-rose-guns-n-roses"/></p>

<blockquote>
<h3>为什么一定要是现场版？</h3>
</blockquote>

<p>只因为那几句最为动人的「na na na na na na na」（别笑！），Axl 用了真声来唱，再有 Bumblefoot 发挥得极为稳定的 solo加持，让我脑内马上浮现出《摔角手》的结尾一幕，Mickey Rourke（就是钢铁侠用电鞭的那个）在台上的纵身一跃。瞬间热泪盈眶。</p>

<p><img src="media/14392006653218/p936921290.jpg" alt="p936921290"/></p>

<p>《摔角手》中 Mickey 也有一段偶然听到酒吧放 GNR 大为兴奋，继而骂 Nirvana 娘炮的戏。</p>

<p><img src="media/14392006653218/p936920207.jpg" alt="p936920207"/></p>

<p>（年轻时的 Mickey 也是一枚美男子）<br/>
<img src="media/14392006653218/Young-Mickey-Rourke.jpg" alt="Young-Mickey-Rourke"/></p>

<p>虽然英雄不舍离场，但 「The Times They Are a-Changin&#39;」，毫不炫酷的直来直去的硬摇滚又还能停留于时代多久呢？</p>

<blockquote>
<p>On an ordinary day<br/>
Not in an ordinary way<br/>
All at once the song I heard<br/>
No longer wouldn&#39;t play for anybody<br/>
Or anyone that needed comfort from somebody<br/>
Needed comfort from someone who cared to be<br/>
Not like you<br/>
And unlike me<br/>
And then voices ran away from me</p>
</blockquote>

<p><strong>「Hard Rockers never die, they just fade away.」</strong><br/>
<img src="media/14392006653218/EasyRider-LRG.jpg" alt="EasyRider-LRG"/></p>

<blockquote>
<p>现场版试听：《<a href="http://www.xiami.com/song/1773432197">Catcher in the Rye</a>》 《<a href="http://www.xiami.com/song/1773432210">Nightrain</a>》</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好Riff献给你，让爱传千里 — 第一集 || 香港独立乐队元老 AMK]]></title>
    <link href="http://yik-sai.rocks/14392001489282.html"/>
    <updated>2015-08-10T17:49:08+08:00</updated>
    <id>http://yik-sai.rocks/14392001489282.html</id>
    <content type="html"><![CDATA[
<p>作为半个金属党，相对于 solo，我其实更爱 riff。本来想憋一期《劲歌金 riff》出来的，想想这似乎更像是一个长期工作，所以倒不如试试一首一首来推介。</p>

<p>当然 riff 并不是金属党专用，同时为了装逼及反装逼，这第一集我觉得首当其冲的就是香港元老独立乐队 AMK 的这首《请让我回家》。</p>

<p><img src="media/14392001489282/11.jpg" alt="11"/></p>

<span id="more"></span><!-- more -->

<p>和我年纪相仿或者比我更小一点的乐迷里，应该有很多都是听了 My Little Airport 林阿P 的介绍而知道 AMK 这个名字的。我倒已经忘记自己是不是了，但《请让我回家》的第一句「多谢你」后接踵而来全程高能的 riff，却是令我记到现在，以至于《劲歌金 riff》这个主题的灵感来源其实就是它。</p>

<p><img src="media/14392001489282/13729_10153435759138788_7221812533438928325_n.jpg" alt="13729_10153435759138788_7221812533438928325_n"/></p>

<p>「多么八十年代的照片」</p>

<p><img src="media/14392001489282/10392022_184367453787_3912473_n.jpg" alt="10392022_184367453787_3912473_n"/></p>

<p>AMK 全称「Adam met Karl」— 寓意为「亚当·斯密遇上卡尔·马克思」— 光名字就足以把各大文青震的一逼，不少大一新生更是闻风丧胆。</p>

<p><img src="media/14392001489282/11667_173182393787_474273_n.jpg" alt="11667_173182393787_474273_n"/></p>

<p>对了，如果你有听王菲，《一人分饰两角》就是 AMK 作的曲。其它的资料网上应该都能找到，我就不重复了，反正我不是考究派。前几年在香港买了他们的 20 周年纪念良心 boxset《History》，但后来发现其实他们的很多歌都过于晦涩和实验，我听了一两次就放弃了。你知啦，那个年代的香港文化人，很多心思的。</p>

<p><img src="media/14392001489282/11667_173051593787_8063009_n.jpg" alt="11667_173051593787_8063009_n"/></p>

<blockquote>
<p>歌曲试听：《<a href="http://www.xiami.com/song/1769902297">请让我回家</a>》《<a href="http://www.xiami.com/song/1768968848">浪漫是你的本性</a>》</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世上本无战事，人们只是深陷其中]]></title>
    <link href="http://yik-sai.rocks/14391996455933.html"/>
    <updated>2015-08-10T17:40:45+08:00</updated>
    <id>http://yik-sai.rocks/14391996455933.html</id>
    <content type="html"><![CDATA[
<p>近日在玩一款游戏叫《This War of Mine》，近几天才从 PC 端移植到 iPad。游戏背景是一座战火中的城市，但这次没有英雄打枪，只有几个被困在废墟里的普普通通的平民，每天在各种废墟中搜寻各种资源，确保自己可以活下去。</p>

<p><img src="media/14391996455933/This-War-of-Mine.jpg" alt="This-War-of-Mine"/></p>

<p>然而游戏的主旨却是「只靠翻垃圾堆可是没法活下去的哦少年」。为了活下去，你得精打细算地和别人交易，通宵站岗以防止被偷、被杀，然后渐渐地为了获得一个罐头、一瓶药而不得不反过来偷窃甚至杀人；而同时仅余的良知使你因此变得沮丧、崩溃，所以又不得不拿出珍贵的生存资源，换一瓶烈酒，只为能在这人间地狱里麻醉自己，多活一天是一天……</p>

<span id="more"></span><!-- more -->

<p>是否劫杀这对老人？全在玩家一念之间。</p>

<p><img src="media/14391996455933/414607-this-war-of-mine-1920x1044.jpg" alt="414607-this-war-of-mine-1920x1044"/></p>

<p>但没有足够的资源，则只能眼睁睁看着自己的队友死去。</p>

<p><img src="media/14391996455933/this_war_of_mine_-_screenshot_04_jpg_1400x0_q85.jpg" alt="this_war_of_mine_-_screenshot_04_jpg_1400x0_q85"/></p>

<p>玩了两天之后，以上游戏体验让我这个先锋少年不禁陷入了深深的思考，然后想起了 Blur 的《Think Tank》。这张唱片的反战主题也确实和游戏很搭，维基百科上有很详细的唱片背景介绍，我就不啰嗦了。</p>

<p>那我会说什么呢。</p>

<blockquote>
<h3>封面</h3>
</blockquote>

<p><img src="media/14391996455933/Blur-ThinkTank.jpg" alt="Blur-ThinkTank"/></p>

<p>熟悉涂鸦界的朋友应该已经猜到了，没错，这的确是大神 Banksy 的手笔。say no more 毋需多言。</p>

<blockquote>
<h3>一首歌 Good Song</h3>
</blockquote>

<p><img src="media/14391996455933/good_cd_cover_big.jpg" alt="good_cd_cover_big"/></p>

<p>说是 Good Song，但细看它的歌词以及当年的单曲封面，或许你能体会得更多。</p>

<blockquote>
<p><em>It&#39;s the rest of my life</em><br/>
<em>Just rolling and rolling</em><br/>
<em>The picture in my pocket</em><br/>
<em>Looks like you</em></p>
</blockquote>

<p><a href="http://www.xiami.com/song/1007306">虾米链接</a></p>

<p>以及它的 MV，看完之后更是有一种难以言喻的抑郁。<br/>
<a href="http://v.qq.com/page/b/0/d/b0011rxi2pd.html">Good Song MV</a></p>

<blockquote>
<h3>另一首歌 Sweet Song</h3>
</blockquote>

<p>Sweet？想象一下你在战火废墟中孑然一身的孤独与无助，而昨晚为了活下去而终于第一次盗窃、第一次伤人的情景还历历在目，请看歌词……</p>

<blockquote>
<p><em>Everyone is dying</em><br/>
<em>Stop crying now here comes the sun</em><br/>
<em>I didn&#39;t mean to hurt you no, no, no</em><br/>
<em>It takes time to see what you have done</em><br/>
<em>So, I wean myself off slowly</em></p>

<p><em>I believe, I believe, I believe</em><br/>
<em>Love is the only one</em><br/>
<em>I deceive, I deceive, I deceive, I deceive</em><br/>
<em>Cos&#39; I&#39;m not that strong</em><br/>
<em>Hope you feel the same</em></p>

<p><em>And now it seems that we&#39;re falling apart</em><br/>
<em>But I hope I see the good in you come back again</em><br/>
<em>I just believed in you</em></p>
</blockquote>

<p><a href="http://www.xiami.com/song/1007312">虾米链接</a></p>

<p>多么绝望而又动人的情话。</p>

<p><img src="media/14391996455933/2a63c955d9410ff342cdf6f30b3bad35.jpg" alt="2a63c955d9410ff342cdf6f30b3bad35"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[黑马iOS笔记]]></title>
    <link href="http://yik-sai.rocks/14391942124795.html"/>
    <updated>2015-08-10T16:10:12+08:00</updated>
    <id>http://yik-sai.rocks/14391942124795.html</id>
    <content type="html"><![CDATA[
<ul>
<li>注释的用途——创建方法名
在方法明上方可用<code>/** 方法名 */</code> 的格式，这样创建的方法便会有中文方法名提示。如：</li>
</ul>

<pre><code class="language-js">/** 创建表格 */
-(void)createtable{

    };
</code></pre>

<p>如下图<br/>
<img src="media/14240102440099/11.png" alt="11"/></p>

<ul>
<li>改代码之前先把旧的注释掉，改完无误再删除。</li>
<li>定义属性的时候，带<code>*</code>号的是地址，不是<code>strong</code>就是<code>weak</code>；没<code>*</code>号的比如<code>int</code>类型，就用<code>assign</code>。</li>
<li>懒加载</li>
</ul>

<p><img src="media/14240102440099/14240147005230.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand（二）iOS应用开发实战]]></title>
    <link href="http://yik-sai.rocks/14381590028220.html"/>
    <updated>2015-07-29T16:36:42+08:00</updated>
    <id>http://yik-sai.rocks/14381590028220.html</id>
    <content type="html"><![CDATA[
<h2>第二周</h2>

<h3>MVC 模式</h3>

<p>C 属于 M 和 V 之间的桥梁作用。V 和 M 一般没有直接联系，不直接进行通信。</p>

<h3>创建导航条、底栏和底栏的按钮的逻辑</h3>

<ol>
<li>实例化一个 viewController</li>
<li>实例化一个 navigationController，并用上面的 viewController 把它初始化</li>
<li>为 navigationController设置标题、图标</li>
<li>重复以上步骤得到足够的数量后</li>
<li>实例化一个 tabBarController</li>
<li>tabBarController 其实是一个数组，往数组里填上以上 navigationController</li>
<li>设定该 window 的 rootViewController 为该 tabBarController</li>
</ol>

<h3>善用父类去统一设置不同 viewController 里一样的对象</h3>

<p>比如说5个 viewController 都需要背景图，可以创建一个 baseViewController，里面写上统一的背景图的设置。然后让这些不同的 viewController 都继承自这个 baseViewController，再分别在这些 viewController 里写入不同参数即可——子类可直接调用父类的属性，需要注意的是，父类的属性必须写在<code>.h</code>文件里。</p>

<h3>比较好的拉伸图片的方法</h3>

<ol>
<li>先对旧图创建一个 UIImage</li>
<li>再创建一个新的 UIImage，对旧图用类方法 <code>[oldImage stretchableImageWithLeftCapWidth:10 topCapHeight:10]</code> 处理</li>
<li>在需要用的地方放入<strong>新</strong>图即可
<img src="media/14381590028220/14383949127417.jpg" alt=""/></li>
</ol>

<h3>为了不被诸多的 tag 搞乱</h3>

<p>可以把 tag 定义成宏，比如 <code>#define kPushButtonTag    100</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand（一）OC 高级编程]]></title>
    <link href="http://yik-sai.rocks/14377181857529.html"/>
    <updated>2015-07-24T14:09:45+08:00</updated>
    <id>http://yik-sai.rocks/14377181857529.html</id>
    <content type="html"><![CDATA[
<h3>do 循环：</h3>

<p>一直做某件事情，直到某个条件不成立</p>

<h3>continue：</h3>

<p>跳过本次循环，进入下一次；而 break 则是跳出整个循环</p>

<h3>条件运算符：</h3>

<p><img src="media/14377181857529/%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="条件运算符"/><br/>
这张图的意思是当<code>age</code> 大于等于<code>18</code>时，<code>test</code>的值为<code>9</code>，否则为<code>10</code>。上方的条件运算符完全等价于下方的<code>if-else</code>表达式</p>

<h3>限定词：</h3>

<ul>
<li><p><code>nonatomic</code>, <code>atomic</code>——原子的，同一时间只允许有一个线程访问，如果同时有多个线程/任务访问，那就要排队，会影响程序效率。所以一般会用「非原子的 <code>nonatomic</code>」，但相对而言，它的安全性会比<code>atomic</code>低。</p></li>
<li><p><code>copy</code>——会复制一份出来，不会影响到原有的数据</p></li>
<li><p><code>retain</code>——会导致对象的引用计数加 1</p></li>
<li><p><code>strong</code>, <code>weak</code>——4.0之后才出现的，强引用和弱引用。<code>strong</code>等价于<code>retain</code>，<code>weak</code>等价于<code>assign</code>，不过<code>weak</code>只能用在对象性数据上</p></li>
<li><p><code>assign</code>——一般用于修饰基本数据类型，比如 int，float 等无需星号的数据类型</p></li>
<li><p><code>readonly</code>——只读，无法修改</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
